/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicLayoutRouteImport } from './routes/(public)/_layout'
import { Route as protectedLayoutRouteImport } from './routes/(protected)/_layout'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as protectedHomeRouteImport } from './routes/(protected)/home'
import { Route as onboardingOnboardingRouteImport } from './routes/(onboarding)/onboarding'
import { Route as publicAuthLayoutRouteImport } from './routes/(public)/auth/_layout'
import { Route as publicAuthSsoCallbackRouteImport } from './routes/(public)/auth/sso-callback'
import { Route as publicAuthRegisterRouteImport } from './routes/(public)/auth/register'
import { Route as publicAuthLoginRouteImport } from './routes/(public)/auth/login'

const publicLayoutRoute = publicLayoutRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedLayoutRoute = protectedLayoutRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const publicIndexRoute = publicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicLayoutRoute,
} as any)
const protectedHomeRoute = protectedHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => protectedLayoutRoute,
} as any)
const onboardingOnboardingRoute = onboardingOnboardingRouteImport.update({
  id: '/(onboarding)/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const publicAuthLayoutRoute = publicAuthLayoutRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => publicLayoutRoute,
} as any)
const publicAuthSsoCallbackRoute = publicAuthSsoCallbackRouteImport.update({
  id: '/sso-callback',
  path: '/sso-callback',
  getParentRoute: () => publicAuthLayoutRoute,
} as any)
const publicAuthRegisterRoute = publicAuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => publicAuthLayoutRoute,
} as any)
const publicAuthLoginRoute = publicAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicAuthLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/auth': typeof publicAuthLayoutRouteWithChildren
  '/onboarding': typeof onboardingOnboardingRoute
  '/home': typeof protectedHomeRoute
  '/auth/login': typeof publicAuthLoginRoute
  '/auth/register': typeof publicAuthRegisterRoute
  '/auth/sso-callback': typeof publicAuthSsoCallbackRoute
}
export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/auth': typeof publicAuthLayoutRouteWithChildren
  '/onboarding': typeof onboardingOnboardingRoute
  '/home': typeof protectedHomeRoute
  '/auth/login': typeof publicAuthLoginRoute
  '/auth/register': typeof publicAuthRegisterRoute
  '/auth/sso-callback': typeof publicAuthSsoCallbackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(protected)': typeof protectedLayoutRouteWithChildren
  '/(public)': typeof publicLayoutRouteWithChildren
  '/(public)/auth': typeof publicAuthLayoutRouteWithChildren
  '/(onboarding)/onboarding': typeof onboardingOnboardingRoute
  '/(protected)/home': typeof protectedHomeRoute
  '/(public)/': typeof publicIndexRoute
  '/(public)/auth/login': typeof publicAuthLoginRoute
  '/(public)/auth/register': typeof publicAuthRegisterRoute
  '/(public)/auth/sso-callback': typeof publicAuthSsoCallbackRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/onboarding'
    | '/home'
    | '/auth/login'
    | '/auth/register'
    | '/auth/sso-callback'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/onboarding'
    | '/home'
    | '/auth/login'
    | '/auth/register'
    | '/auth/sso-callback'
  id:
    | '__root__'
    | '/(protected)'
    | '/(public)'
    | '/(public)/auth'
    | '/(onboarding)/onboarding'
    | '/(protected)/home'
    | '/(public)/'
    | '/(public)/auth/login'
    | '/(public)/auth/register'
    | '/(public)/auth/sso-callback'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  protectedLayoutRoute: typeof protectedLayoutRouteWithChildren
  publicLayoutRoute: typeof publicLayoutRouteWithChildren
  onboardingOnboardingRoute: typeof onboardingOnboardingRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof publicLayoutRoute
    }
    '/(protected)/home': {
      id: '/(protected)/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof protectedHomeRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
    '/(onboarding)/onboarding': {
      id: '/(onboarding)/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof onboardingOnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/auth': {
      id: '/(public)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof publicAuthLayoutRouteImport
      parentRoute: typeof publicLayoutRoute
    }
    '/(public)/auth/sso-callback': {
      id: '/(public)/auth/sso-callback'
      path: '/sso-callback'
      fullPath: '/auth/sso-callback'
      preLoaderRoute: typeof publicAuthSsoCallbackRouteImport
      parentRoute: typeof publicAuthLayoutRoute
    }
    '/(public)/auth/register': {
      id: '/(public)/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof publicAuthRegisterRouteImport
      parentRoute: typeof publicAuthLayoutRoute
    }
    '/(public)/auth/login': {
      id: '/(public)/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof publicAuthLoginRouteImport
      parentRoute: typeof publicAuthLayoutRoute
    }
  }
}

interface protectedLayoutRouteChildren {
  protectedHomeRoute: typeof protectedHomeRoute
}

const protectedLayoutRouteChildren: protectedLayoutRouteChildren = {
  protectedHomeRoute: protectedHomeRoute,
}

const protectedLayoutRouteWithChildren = protectedLayoutRoute._addFileChildren(
  protectedLayoutRouteChildren,
)

interface publicAuthLayoutRouteChildren {
  publicAuthLoginRoute: typeof publicAuthLoginRoute
  publicAuthRegisterRoute: typeof publicAuthRegisterRoute
  publicAuthSsoCallbackRoute: typeof publicAuthSsoCallbackRoute
}

const publicAuthLayoutRouteChildren: publicAuthLayoutRouteChildren = {
  publicAuthLoginRoute: publicAuthLoginRoute,
  publicAuthRegisterRoute: publicAuthRegisterRoute,
  publicAuthSsoCallbackRoute: publicAuthSsoCallbackRoute,
}

const publicAuthLayoutRouteWithChildren =
  publicAuthLayoutRoute._addFileChildren(publicAuthLayoutRouteChildren)

interface publicLayoutRouteChildren {
  publicAuthLayoutRoute: typeof publicAuthLayoutRouteWithChildren
  publicIndexRoute: typeof publicIndexRoute
}

const publicLayoutRouteChildren: publicLayoutRouteChildren = {
  publicAuthLayoutRoute: publicAuthLayoutRouteWithChildren,
  publicIndexRoute: publicIndexRoute,
}

const publicLayoutRouteWithChildren = publicLayoutRoute._addFileChildren(
  publicLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  protectedLayoutRoute: protectedLayoutRouteWithChildren,
  publicLayoutRoute: publicLayoutRouteWithChildren,
  onboardingOnboardingRoute: onboardingOnboardingRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
