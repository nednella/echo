package com.example.echo_api.persistence.model.user;

import java.time.Instant;
import java.util.Objects;
import java.util.UUID;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import com.example.echo_api.util.Utils;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * Entity class representing a user in the local application.
 */
@Entity
@Table(name = "\"user\"")
@Getter
@Builder
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@NoArgsConstructor(access = AccessLevel.PROTECTED)
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(updatable = false)
    private UUID id;

    @Column(name = "external_id", unique = true, nullable = false, updatable = false)
    private String externalId;

    @Builder.Default
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private UserStatus status = UserStatus.ACTIVE;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private Instant createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private Instant updatedAt;

    // ---- factory methods ----

    /**
     * Factory method to create a new {@link User} during onboarding to sync an
     * external user to a local user.
     * 
     * @param externalId the unique identifier from the external source
     * @return new {@link User} instance
     * @throws IllegalArgumentException If {@code externalId} is null
     */
    public static User fromExternalSource(String externalId) {
        return User.builder()
            .externalId(Utils.checkNotNull(externalId, "External ID"))
            .build();
    }

    /**
     * Factory method to create a new {@link User} for <b>unit testing only</b>,
     * where a UUID cannot be generated by JPA.
     * 
     * @param id         the placeholder UUID
     * @param externalId the placeholder external ID
     * @return new {@link User} instance
     * @throws IllegalArgumentException if any argument is null
     */
    public static User forTest(UUID id, String externalId) {
        return User.builder()
            .id(Utils.checkNotNull(id, "ID"))
            .externalId(Utils.checkNotNull(externalId, "External ID"))
            .build();
    }

    // ---- setters ----

    public void setStatus(UserStatus status) {
        this.status = status;
    }

    // ---- equals & hashcode ----

    /**
     * Compares {@link User} objects for equality.
     * 
     * <p>
     * Equality is determined based on the immutable {@code externalId} field, which
     * is guaranteed to be unique and never change for a user's lifetime.
     * 
     * @param o The object to be compared
     * @return {@code true} if the externalId of both users is equal, {@code false}
     *         otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (!(o instanceof User))
            return false;
        User that = (User) o;
        return Objects.equals(this.externalId, that.externalId);
    }

    /**
     * Generates a hashcode for {@link User} objects based on the immutable
     * {@code externalId} field.
     * 
     * <p>
     * Two equal {@link User} objects will always generate an equal
     * {@code hashCode}, but two equal hashcodes do not guarantee that the
     * {@link User} objects are also equal.
     * 
     * @return hashcode value based on the externalId
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.externalId);
    }

}
