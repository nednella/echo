/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicLayoutRouteImport } from './routes/(public)/_layout'
import { Route as authLayoutRouteImport } from './routes/(auth)/_layout'
import { Route as appLayoutRouteImport } from './routes/(app)/_layout'
import { Route as authIndexRouteImport } from './routes/(auth)/index'
import { Route as publicSsoCallbackRouteImport } from './routes/(public)/sso-callback'
import { Route as onboardingOnboardingRouteImport } from './routes/(onboarding)/onboarding'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appHomeRouteImport } from './routes/(app)/home'

const publicLayoutRoute = publicLayoutRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const authLayoutRoute = authLayoutRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appLayoutRoute = appLayoutRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const authIndexRoute = authIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authLayoutRoute,
} as any)
const publicSsoCallbackRoute = publicSsoCallbackRouteImport.update({
  id: '/sso-callback',
  path: '/sso-callback',
  getParentRoute: () => publicLayoutRoute,
} as any)
const onboardingOnboardingRoute = onboardingOnboardingRouteImport.update({
  id: '/(onboarding)/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)
const appHomeRoute = appHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => appLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authIndexRoute
  '/home': typeof appHomeRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/onboarding': typeof onboardingOnboardingRoute
  '/sso-callback': typeof publicSsoCallbackRoute
}
export interface FileRoutesByTo {
  '/': typeof authIndexRoute
  '/home': typeof appHomeRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/onboarding': typeof onboardingOnboardingRoute
  '/sso-callback': typeof publicSsoCallbackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appLayoutRouteWithChildren
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(public)': typeof publicLayoutRouteWithChildren
  '/(app)/home': typeof appHomeRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(onboarding)/onboarding': typeof onboardingOnboardingRoute
  '/(public)/sso-callback': typeof publicSsoCallbackRoute
  '/(auth)/': typeof authIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/login'
    | '/register'
    | '/onboarding'
    | '/sso-callback'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/login' | '/register' | '/onboarding' | '/sso-callback'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/(public)'
    | '/(app)/home'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(onboarding)/onboarding'
    | '/(public)/sso-callback'
    | '/(auth)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appLayoutRoute: typeof appLayoutRouteWithChildren
  authLayoutRoute: typeof authLayoutRouteWithChildren
  publicLayoutRoute: typeof publicLayoutRouteWithChildren
  onboardingOnboardingRoute: typeof onboardingOnboardingRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/': {
      id: '/(auth)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authIndexRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(public)/sso-callback': {
      id: '/(public)/sso-callback'
      path: '/sso-callback'
      fullPath: '/sso-callback'
      preLoaderRoute: typeof publicSsoCallbackRouteImport
      parentRoute: typeof publicLayoutRoute
    }
    '/(onboarding)/onboarding': {
      id: '/(onboarding)/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof onboardingOnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(app)/home': {
      id: '/(app)/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof appHomeRouteImport
      parentRoute: typeof appLayoutRoute
    }
  }
}

interface appLayoutRouteChildren {
  appHomeRoute: typeof appHomeRoute
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appHomeRoute: appHomeRoute,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface authLayoutRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  authIndexRoute: typeof authIndexRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  authIndexRoute: authIndexRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface publicLayoutRouteChildren {
  publicSsoCallbackRoute: typeof publicSsoCallbackRoute
}

const publicLayoutRouteChildren: publicLayoutRouteChildren = {
  publicSsoCallbackRoute: publicSsoCallbackRoute,
}

const publicLayoutRouteWithChildren = publicLayoutRoute._addFileChildren(
  publicLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appLayoutRoute: appLayoutRouteWithChildren,
  authLayoutRoute: authLayoutRouteWithChildren,
  publicLayoutRoute: publicLayoutRouteWithChildren,
  onboardingOnboardingRoute: onboardingOnboardingRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
